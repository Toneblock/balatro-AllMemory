
[manifest]
version = "1.0.0"
dump_lua = true
priority = 5

# define globals used for some ref tables lol
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''self.GAME.modifiers = self.GAME.modifiers or {}'''
position = "after"
payload = '''
G.GAME.allm_question = '??'
G.GAME.current_round.allm_question = '?'
G.GAME.round_resets.allm_question = '?'
'''
match_indent = true



# hide tooltips
# there's probably a more efficient solution rather than patching every instance, but whatever
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.children.alert and not self.config.center.alerted then'''
position = "before"
payload = '''
if allm_hide('tooltips', self) then Node.hover(self); return end
'''
match_indent = true

# same for tags
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''self:get_uibox_table(tag_sprite)'''
position = "before"
payload = '''
if allm_hide('tooltips', self) then Node.hover(_self); return end
'''
match_indent = true

# and tag sprite from skips
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''if (e.states.hover.is or e.parent.states.hover.is) and (e.created_on_pause == G.SETTINGS.paused) and'''
position = "before"
payload = '''
if allm_hide('tooltips', e) then return end
'''
match_indent = true

# poker hands because why not
[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = '''if self.config and self.config.on_demand_tooltip then'''
position = "before"
payload = '''
if allm_hide('tooltips') then Node.hover(self); return end
'''
match_indent = true

# blinds in collection
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = '''if not card.hovering and card.states.visible then'''
position = "at"
payload = '''
if not card.hovering and card.states.visible and not allm_hide('tooltips') then
'''
match_indent = true



# hide boss effects
# don't warn the player about throwing hand
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then'''
position = "before"
payload = '''
if allm_hide('boss_effects') then G.boss_throw_hand = nil end
'''
match_indent = true



# hide deck peeking ui
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''if G.CONTROLLER.HID.controller and G.STATE == G.STATES.SELECTING_HAND and not self.children.peek_deck then'''
position = "before"
payload = '''
if allm_hide('deck') then return end
'''
match_indent = true



# hide sell value
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.sell_cost_label = self.facing == 'back' and '?' or self.sell_cost'''
position = "after"
payload = '''
self.sell_cost_label = allm_hide('costs') and '?' or self.sell_cost_label
'''
match_indent = true

# hide buy cost
# THIS one is spaghetti and will probably break but idc
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {{prefix = localize('$'), ref_table = card, ref_value = 'cost'}}, colours = {G.C.MONEY},shadow = true, silent = true, bump = true, pop_in = 0, scale = 0.5})}},'''
position = "at"
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {{prefix = localize('$'), ref_table = card, ref_value = allm_hide('costs') and 'sell_cost_label' or 'cost'}}, colours = {G.C.MONEY},shadow = true, silent = true, bump = true, pop_in = 0, scale = 0.5})}},
'''
match_indent = true



# hide score reqs 1 (blind chip text)
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''self.chip_text = number_format(self.chips)'''
position = "after"
payload = '''
self.chip_text = allm_hide('requirements') and '????' or self.chip_text
'''
match_indent = true

# hide score reqs 2 (blind ui)
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*blind_choice.config.mult*G.GAME.starting_params.ante_scaling'''
position = "after"
payload = '''
blind_amt = allm_hide('requirements') and '????' or blind_amt
'''
match_indent = true

# hide score reqs 3 (collection ui)
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/overrides.lua"]'''
pattern = '''{ n = G.UIT.T, config = { text = number_format(get_blind_amount(i)), scale = 0.4, colour = i <= G.PROFILES[G.SETTINGS.profile].high_scores.furthest_ante.amt and G.C.RED or G.C.JOKER_GREY, shadow = true } },'''
position = "at"
payload = '''
{ n = G.UIT.T, config = { text = allm_hide('requirements') and '????' or number_format(get_blind_amount(i)), scale = 0.4, colour = i <= G.PROFILES[G.SETTINGS.profile].high_scores.furthest_ante.amt and G.C.RED or G.C.JOKER_GREY, shadow = true } },
'''
match_indent = true

# disable fire lol
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''G.ARGS.score_intensity.required_score = G.GAME.blind and G.GAME.blind.chips or 0'''
position = "before"
payload = '''
G.ARGS.score_intensity.earned_score = allm_hide('requirements') and 0 or G.ARGS.score_intensity.earned_score
'''
match_indent = true



# hide current money
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME, ref_value = 'dollars', prefix = localize('$')}},'''
position = "at"
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME, ref_value = allm_hide('money') and 'allm_question' or 'dollars', prefix = localize('$')}},
'''
match_indent = true

# because SOMEONE'S gonna point it out if i don't do this
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = localize('$')..format_ui_value(saved_game.GAME.dollars),colour = G.C.ORANGE, scale = 0.8*scale}}}}'''
position = "at"
payload = '''
{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = localize('$')..(allm_hide('money') and '??' or format_ui_value(saved_game.GAME.dollars)),colour = G.C.ORANGE, scale = 0.8*scale}}}}
'''
match_indent = true



# hide hand info (selection)
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''if backwards then'''
position = "before"
payload = '''
if allm_hide('poker_hands') then
	update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname='????', level='?', mult = '?', chips = '?'})
	return
end
'''
match_indent = true

# hide hand info (level ups 1)
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, level=G.GAME.hands[self.ability.consumeable.hand_type].level})'''
position = "at"
payload = '''
if allm_hide('poker_hands') then
	update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname='????', level='?', mult = '?', chips = '?'})
else
	update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, level=G.GAME.hands[self.ability.consumeable.hand_type].level})
end
'''
match_indent = true

# hide hand info (level ups 2)
# this isn't exactly efficient, or safe, or good, but it works
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''update_hand_text({delay = 0}, {mult = G.GAME.hands[hand].mult, StatusText = true})'''
position = "at"
payload = '''
update_hand_text({delay = 0}, {mult = allm_hide('poker_hands') and '+?' or G.GAME.hands[hand].mult, StatusText = true})
'''
match_indent = true

# hide hand info (level ups 3)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''update_hand_text({delay = 0}, {chips = G.GAME.hands[hand].chips, StatusText = true})'''
position = "at"
payload = '''
update_hand_text({delay = 0}, {chips = allm_hide('poker_hands') and '+?' or G.GAME.hands[hand].chips, StatusText = true})
'''
match_indent = true

# hide hand info (level ups 4)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level=G.GAME.hands[hand].level})'''
position = "at"
payload = '''
update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level=allm_hide('poker_hands') and '?' or G.GAME.hands[hand].level})
'''
match_indent = true

# hide hand info (assist hook, avoid putting string into math.min)
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.C, config={align = "cm", padding = 0.01, r = 0.1, colour = G.C.HAND_LEVELS[math.min(7, G.GAME.hands[handname].level)], minw = 1.5, outline = 0.8, outline_colour = G.C.WHITE}, nodes={'''
position = "at"
payload = '''
{n=G.UIT.C, config={align = "cm", padding = 0.01, r = 0.1, colour = G.C.HAND_LEVELS[(allm_hide('poker_hands') and 1 or math.min(7, G.GAME.hands[handname].level))], minw = 1.5, outline = 0.8, outline_colour = G.C.WHITE}, nodes={
'''
match_indent = true

# hide hand level everywhere
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if vals.level and G.GAME.current_round.current_hand.hand_level ~= ' '..localize('k_lvl')..tostring(vals.level) then'''
position = "before"
payload = '''
if allm_hide('poker_hands', 'level') and vals.level ~= '' then
	vals.level = '?' 
end
'''
match_indent = true



# hide hands left
# i hate it
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.current_round, ref_value = 'hands_left'}}, font = G.LANGUAGES['en-us'].font, colours = {G.C.BLUE},shadow = true, rotate = true, scale = 2*scale}),id = 'hand_UI_count'}},'''
position = "at"
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.current_round, ref_value = allm_hide('hands_discards') and 'allm_question' or 'hands_left'}}, font = G.LANGUAGES['en-us'].font, colours = {G.C.BLUE},shadow = true, rotate = true, scale = 2*scale}),id = 'hand_UI_count'}},
'''
match_indent = true

# hide discards left
# still hate it
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.current_round, ref_value = 'discards_left'}}, font = G.LANGUAGES['en-us'].font, colours = {G.C.RED},shadow = true, rotate = true, scale = 2*scale}),id = 'discard_UI_count'}},'''
position = "at"
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.current_round, ref_value = allm_hide('hands_discards') and 'allm_question' or 'discards_left'}}, font = G.LANGUAGES['en-us'].font, colours = {G.C.RED},shadow = true, rotate = true, scale = 2*scale}),id = 'discard_UI_count'}},
'''
match_indent = true



# hide ante
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.round_resets, ref_value = 'ante'}}, colours = {G.C.IMPORTANT},shadow = true, font = G.LANGUAGES['en-us'].font, scale = 2*scale}),id = 'ante_UI_count'}},'''
position = "at"
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.round_resets, ref_value = allm_hide('ante') and 'allm_question' or 'ante'}}, colours = {G.C.IMPORTANT},shadow = true, font = G.LANGUAGES['en-us'].font, scale = 2*scale}),id = 'ante_UI_count'}},
'''
match_indent = true

# hide round
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME, ref_value = 'round'}}, colours = {G.C.IMPORTANT},shadow = true, scale = 2*scale}),id = 'round_UI_count'}},'''
position = "at"
payload = '''
{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME, ref_value = allm_hide('ante') and 'allm_question' or 'round'}}, colours = {G.C.IMPORTANT},shadow = true, scale = 2*scale}),id = 'round_UI_count'}},
'''
match_indent = true

# hide ante in voucher area
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.T, config={text = localize{type = 'variable', key = 'ante_x_voucher', vars = {G.GAME.round_resets.ante}}, scale = 0.45, colour = G.C.L_BLACK, vert = true}},'''
position = "at"
payload = '''
{n=G.UIT.T, config={text = localize{type = 'variable', key = 'ante_x_voucher', vars = {allm_hide('ante') and '?' or G.GAME.round_resets.ante}}, scale = 0.45, colour = G.C.L_BLACK, vert = true}},
'''
match_indent = true

# hide ante in savegame loading
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = tostring(saved_game.GAME.round_resets.ante),colour = G.C.BLUE, scale = 0.8*scale}}}}'''
position = "at"
payload = '''
{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = allm_hide('ante') and '?' or tostring(saved_game.GAME.round_resets.ante),colour = G.C.BLUE, scale = 0.8*scale}}}}
'''
match_indent = true

# hide round in savegame loading
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = tostring(saved_game.GAME.round),colour = G.C.RED, scale = 0.8*scale}}}}'''
position = "at"
payload = '''
{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = allm_hide('ante') and '??' or tostring(saved_game.GAME.round),colour = G.C.RED, scale = 0.8*scale}}}}
'''
match_indent = true



# hide cardarea limits
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''self.children.area_uibox = UIBox{'''
position = "before"
payload = '''
if allm_hide('cardarea_limits') then card_count = nil end
'''
match_indent = true



# hide score (stop juicing mult)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if not G.TAROT_INTERRUPT then G.hand_text_area.mult:juice_up() end'''
position = "at"
payload = '''
if not allm_hide('score') then
	if not G.TAROT_INTERRUPT then G.hand_text_area.mult:juice_up() end
end
'''
match_indent = true

# hide best score (continue run)
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = number_format(saved_game.GAME.round_scores.hand.amt),colour = G.C.RED, scale = scale_number(saved_game.GAME.round_scores.hand.amt, 0.8*scale, 100000000000)}}}}'''
position = "at"
payload = '''
{n=G.UIT.C, config={align = "cl", minw = rwidth, maxw = lwidth}, nodes={{n=G.UIT.T, config={text = allm_hide('score') and '????' or number_format(saved_game.GAME.round_scores.hand.amt),colour = G.C.RED, scale = scale_number(saved_game.GAME.round_scores.hand.amt, 0.8*scale, 100000000000)}}}}
'''
match_indent = true